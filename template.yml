# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'
    
  Api:
    Cors:
      AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  AppId:
    Type: String
  ClusterUrl:
    Type: String
    Default: mongodb+srv://Javier:physiolivia@cluster0.crtxs.mongodb.net?retryWrites=true&w=majority
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  
  # This is a Lambda function config associated with the source code: get-all-items.js
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Replace <bucket> with your bucket name
      CodeUri: ./
      Handler: src/bck/handlers/proxy.handler
      Runtime: nodejs10.x
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: __tests__/examples/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  # getByIdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./
  #     Handler: __tests__/examples/handlers/get-by-id.getByIdHandler
  #     Runtime: nodejs10.x
  #     MemorySize: 128
  #     Timeout: 60
  #     Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /{id}
  #           Method: GET            
        
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: __tests__/examples/handlers/put-item.putItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:  
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable
  
  getAllPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/bck/handlers/get-patients.getAllPatientsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Get http all patients in DB clinica
      Events:
        Api:
          Type: Api
          Properties:
            Path: /clinica/getAllPatients
            Method: GET
      Environment:
        Variables:
          CLUSTER_URL: !Ref ClusterUrl

  updatePatientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/bck/handlers/update-patient-by-id.updatePatientByIdHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Edit http all patients in DB clinica
      Events:
        Api:
          Type: Api
          Properties:
            Path: /clinica/updatePatientById
            Method: POST
      Environment:
        Variables:
          CLUSTER_URL: !Ref ClusterUrl

  getPatientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/bck/handlers/get-patients.getPatientByIdHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Get http patient by id in DB clinica
      Events:
        Api:
          Type: Api
          Properties:
            Path: /clinica/getPatientById/{idDocument}
            Method: GET
      Environment:
        Variables:
          CLUSTER_URL: !Ref ClusterUrl

  addPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/bck/handlers/add-patients.addPatientHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Add patient in DB clinica
      Events:
        Api:
          Type: Api
          Properties:
            Path: /clinica/addPatient
            Method: POST
      Environment:
        Variables:
          CLUSTER_URL: !Ref ClusterUrl
  

  getAllPatientsViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/front/handlers/get-all-patients-view.getAllPatientsView
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Get All Patient View
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patientsView
            Method: GET
  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
